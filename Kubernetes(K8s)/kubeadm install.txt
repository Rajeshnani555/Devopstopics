we are going to learn How to Create Kubernetes cluster using Kubeadm on Ubuntu 22.04 LTS and Join Worker Node to the Cluster

Prerequisites:

2 or 3 Ubuntu 20.04 LTS System with Minimal Installation
Minimum 2 or more CPU, 3 GB RAM.
Disable SWAP on All node
SSH Access with sudo privileges

Firewall Ports/Inbound Traffic Ports for Kubernetes Cluster
Control-plane node(s)
Protocol  Direction	 Port Range	Purpose	                        Used By
TCP	Inbound	         6443*	        Kubernetes API server	         All
TCP	Inbound	         2379-2380	etcd server client API	         kube-apiserver, etcd
TCP	Inbound	         10250	        Kubelet API	                 Self,Control plane
TCP	Inbound	         10251	        kube-scheduler	                 Self
TCP	Inbound	         10252	        kube-controller-manager	         Self

Worker node(s)
Protocol Direction	Port Range	Purpose	           Used By
TCP	Inbound	        10250	        Kubelet API	   Self, Control plane
TCP	Inbound	        30000-32767	NodePort Servicesâ€  All


You can clone the repository for reference.


Step #1:IPtables to see bridged traffic

Execute the following commands on all the nodes for IPtables to see bridged traffic.

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
# Apply sysctl params without reboot
sudo sysctl --system


Step #2:Disable swap on all the Nodes
For kubeadm to work properly, you need to disable swap on all the nodes using the following command.

sudo swapoff -a
(crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true


Step #3:Install CRI-O Runtime On All The Nodes
Create the .conf file to load the modules at bootup

cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF

Step #4:Install Kubeadm & Kubelet & Kubectl on all Nodes
Install the required dependencies

Update your system packages:

sudo apt-get update
Install apt-transport-https curl

sudo apt-get install -y apt-transport-https curl
Add gpg keys

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo vi /etc/apt/sources.list.d/kubernetes.list
Add this below lines in this file

deb https://apt.kubernetes.io/ kubernetes-xenial main
Lets install kubelet kubeadm kubectl

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

Run the ./common.sh file (kubeadm-scripts/scripts) in this location on both nodes:

./common.sh
Now you need to change master.sh file

sudo nano master.sh
PUBLIC_IP_ACCESS="false"

False replace with true

PUBLIC_IP_ACCESS="true"
Now run the master.sh file

./master.sh

Use the following commands from the output to create the kubeconfig in master so that you can use kubectl to interact with cluster API

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Now, verify the kubeconfig by executing the following kubectl command to list all the pods in the kube-system namespace.

kubectl get po -n kube-system
Run the following command:

kubectl get nodes
NAME               STATUS   ROLES           AGE     VERSION
ip-172-31-1-99     Ready    control-plane   3h40m   v1.27.2
ip-172-31-13-187   Ready    <none>          3h37m   v1.27.2
Step #5:Join Worker Node to the Cluster
Next Join two worker nodes to master.

sudo kubeadm join 172.31.6.177:6443 --token vr5rat.seyprj6jvw4xy43m --discovery-token-ca-cert-hash sha256:4c9b53eb03744b4cf21c5bdacd712024eb09030561714cc5545838482c8017b3
Output:

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
Check the All node status

sudo kubectl get nodes





